#! /usr/bin/env bash

SELF=$0

PACKAGE="@PACKAGE@"
VERSION="@VERSION@"
prefix="@prefix@"
exec_prefix="@exec_prefix@"
bindir="@bindir@"
libdir="@libdir@"
includedir="@includedir@"
sysconfdir="@sysconfdir@"

if [[ ${bindir} == @*@ ]]
then
	SELFDIR=$(cd "$(dirname "${SELF}")" && pwd)
	bindir=${SELFDIR}
	libdir=${SELFDIR}
	includedir=${SELFDIR}
	sysconfdir=${SELFDIR}

	CC=${SELFDIR}/parity.gnu.gcc/parity.gnu.gcc
	AR=${SELFDIR}/parity.gnu.ar/parity.gnu.ar
else
	SELFDIR=${libdir}/${PACKAGE}-${VERSION}

	CC=${bindir}/parity.gnu.gcc
	AR=${bindur}/parity.gnu.ar
fi

deflibdir=${libdir}
defincludedir=${includedir}
defsysconfdir=${sysconfdir}

usage() {
	cat <<EOF
${SELF##*/} [options] action [hostconfig...]
EOF
}

parityconf-help() {
	cat <<EOF
${SELF##*/} [options] action [hostconfig...]

Where options is a combination of:
  --quiet   No progress output at all.
  --verbose More progress output.
  --debug   Enable shell trace.
  --trace   Enable shell trace when running external commands.

  --sysconfdir dir
     Operate on the parity configuration files in dir.
	 Default dir is: ${defsysconfdir}

  --libdir dir
     Operate on the parity libraries in dir.
	 Default dir is: ${deflibdir}

  --includedir dir
     Operate on the parity libraries in dir.
	 Default dir is: ${defincludedir}

Where action is one of:

  --help
     This help.

  --list-supported
      List any hostconfig identifiers supported.
      Unless --quiet, progress output goes to standard error.

  --list-available
      List hostconfig identifiers for installed MSVC compilers found.
      Unless --quiet, progress output goes to standard error.

  --is-available hostconfig
      Test if MSVC compiler for hostconfig identifier is installed.
      Unless --quiet, progress output goes to standard error.

  --enable hostconfig...
      Enables configuration for hostconfig identifiers.

  --enable-all
      Enables configuration for all available hostconfig identifiers.

  --disable hostconfig...
      Disables configuration for hostconfig identifiers.

  --disable-all
      Disables configuration for all supported hostconfig identifiers.

  --set-default hostconfig...
      Enables configuration for hostconfig identifiers, and does set
      each one as default for the hostconfig's architecture, in order,
      so the last one specified per architecture remains the default.

Where hostconfig is:

  Known as "host triplet" (arch-vendor-os, or even arch-vendor-os-libc).
  Use --list-supported to get an idea of possible values.

EOF
}

get-supported-vsvers() {
	local vsvers=(
		 7.0	# Visual Studio 2002, cl.exe Version 13.00
		 7.1	# Visual Studio 2003, cl.exe Version 13.10
		 8.0	# Visual Studio 2005, cl.exe Version 14.00
		 9.0	# Visual Studio 2008, cl.exe Version 15.00
		10.0	# Visual Studio 2010, cl.exe Version 16.00
		11.0	# Visual Studio 2012, cl.exe Version 17.00
		12.0	# Visual Studio 2013, cl.exe Version 18.00
		14.0	# Visual Studio 2015, cl.exe Version 19.00
		15.0	# Visual Studio 2017, cl.exe Version 19.10
	)
    local vsver
    for vsver in "${vsvers[@]}"
    do
        echo "${vsver}"
    done
    return 0
}

get-supported-vsarchs() {
	local vsarchs=(
		i686
		x86_64
	)
    local vsarch
    for vsarch in "${vsarchs[@]}"
    do
        echo "${vsarch}"
    done
    return 0
}

get-supported-chosts() {
	local vsarch vsver
	for vsarch in $(get-supported-vsarchs)
	do
		for vsver in $(get-supported-vsvers)
		do
			echo "${vsarch}-pc-winnt-msvc${vsver}"
		done
	done
	return 0
}

#
# Cached value, allows to match with *" <chost> "*
#
SUPPORTED_CHOSTS=" $(echo $(get-supported-chosts) ) "
is-supported-chost() {
	[[ ${SUPPORTED_CHOSTS} == *" ${1} "* ]]
}

get-supported-executables() {
	local chost=$(get-chost "$1")

	local vsarch=$(get-vsarch "${chost}")
	local vsver=$(get-vsver "${chost}")

	local vsexes=(
		'name=Compiler          executable=cl.exe    '
		'name=Linker            executable=link.exe  '
		'name=Manifest          executable=mt.exe    '
		'name=ResourceCompiler  executable=rc.exe    '
		'name=ResourceConverter executable=cvtres.exe'
	)
	case ${vsarch} in
	x86) vsexes+=( 'name=Assembler executable=ml.exe  ' ) ;;
	x64) vsexes+=( 'name=Assembler executable=ml64.exe' ) ;;
	esac
	local vsexe
	for vsexe in "${vsexes[@]}"
	do
		echo "${vsexe}"
	done
	return 0
}

get-supported-sdklibs() {
	local sdklibs=(
		kernel32
		user32
		advapi32
		gdi32
		ws2_32
		shell32
		ole32
		winspool
		comctl32
		comdlg32
		userenv
		uuid
	)
	local sdklib
	for sdklib in "${sdklibs[@]}"
	do
		echo "${sdklib}"
	done
}

get-vsarch() {
	case $1 in
	*x64*|*amd64*|*x86_64*) echo "x64" ;;
	*x86*|*i?86*) echo "x86" ;;
	esac
	return 0
}

get-vsver() {
	case $1 in
	*msvc*)
		local vcver=${1##*msvc}
		echo "msvc${vcver%%-*}"
		;;
	esac
	return 0
}

get-chost() {
	local vsarch=$(get-vsarch "$*")
	local vsver=$(get-vsver "$*")
	case ${vsarch} in
	x86) echo "i686-pc-winnt-${vsver}" ;;
	x64) echo "x86_64-pc-winnt-${vsver}" ;;
	esac
	return 0
}

get-cflags() {
	local vsarch=$(get-vsarch "$*")
	local vsver=$(get-vsver "$*")
	case ${vsarch} in
	x86) echo "-m32 -m${vsver}" ;;
	x64) echo "-m64 -m${vsver}" ;;
	esac
	return 0
}

args-to-chosts() {
	local arg chost chosts=()
	for arg in "$@"
	do
		chost=$(get-chost "${arg}")
		is-supported-chost "${chost}" || die "Invalid configuration value '${arg}' (try --list-supported.)"
		chosts+=("${chost}")
	done
	echo "${chosts[@]}"
	return 0
}

NL="
"

die() {
	${1+:} false && echo "${SELF##*/}: $@" >&2
	exit 1
}

[[ -r "/proc/registry/HKEY_LOCAL_MACHINE/SOFTWARE/." ]] || die "Missing Cygwin based POSIX environment."

windir=$(cygpath -W)
sysdir=$(cygpath -S)

eval "cmd() { PATH=\"${windir}:${sysdir}:${sysdir}/WBEM\" cmd.exe \"\$@\"; }"

regquery() {
	regquery_result=
	if [[ -r /proc/registry/${1}/${2:-.}/. ]]
	then
		return 0
	fi
	if [[ -r /proc/registry/${1}/${2} ]]
	then
		regquery_result=`tr -d \\\\0 < "/proc/registry/${1}/${2}"`
		return $?
	fi
	return 1
}

regquery_vsroot() {
	local vsver=$(get-vsver "${1}")
	vsver=${vsver#msvc}
	if regquery HKEY_LOCAL_MACHINE/SOFTWARE/Wow6432Node/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_CURRENT_USER/SOFTWARE/Wow6432Node/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	|| regquery HKEY_CURRENT_USER/SOFTWARE/Microsoft/VisualStudio/SxS/VS7 "${vsver}" \
	; then
		regquery_vsroot_result=${regquery_result}
		return 0
	fi
	return 1
}

query-novcvars-once() {
	[[ -z ${novcPATH-}${novcINCLUDE-}${novcLIB-}${novcLIBPATH-} ]] || return 0

	novcPATH= novcINCLUDE= novcLIB= novcLIBPATH=

	noquiet "Querying environment without MSVC ..."
	traceon
	eval $(cmd /c set PATH '&&' set INCLUDE '&&' set LIB 2>/dev/null |
		sed -nE "s/\\r\$//; s,\\\\,/,g; /^(PATH|INCLUDE|LIB|LIBPATH)=/s/^([^=]*)=(.*)\$/novc\1=$'\2'/p"
	)
	traceoff $?

	if [[ -n ${novcPATH}${novcINCLUDE}${novcLIB}${novcLIBPATH} ]]
	then
		verbose "Querying environment without MSVC done."
		return 0
	fi
	noquiet "Querying environment without MSVC failed."
	return 1
}

query-vcvars() {
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1

	query-novcvars-once || die "Cannot get even initial environment."

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")

	regquery_vsroot "${vsver}" || return 1

	noquiet "Querying environment for ${chost} ..."

	vcPATH= vcINCLUDE= vcLIB= vcLIBPATH=

	local vsroot=$(cygpath -u "$regquery_vsroot_result")
	local vcvarsall
	vcvarsall=${vsroot}/VC/Auxiliary/Build/vcvarsall.bat
	[[ -r ${vcvarsall} ]] ||
	vcvarsall=${vsroot}/VC/vcvarsall.bat
	[[ -r ${vcvarsall} ]] || return 1

	# MSVC 10.0 and above query their VSxxCOMNTOOLS on their own
	local comntoolsvar=
	case ${vsver} in
	msvc7.0) comntoolsvar=VS70COMNTOOLS ;;
	msvc7.1) comntoolsvar=VS71COMNTOOLS ;;
	msvc8.0) comntoolsvar=VS80COMNTOOLS ;;
	msvc9.0) comntoolsvar=VS90COMNTOOLS ;;
	esac
	if [[ -n ${comntoolsvar} ]]
	then
		if regquery 'HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Session Manager/Environment' "${comntoolsvar}"
		then
			eval "export ${comntoolsvar}=\${regquery_result}"
		else
			unset ${comntoolsvar}
		fi
	fi

	traceon
    INCLUDE= LIB= LIBPATH= \
    eval $(cmd /c "$(cygpath -w "${vcvarsall}")" ${vsarch} '&&' set PATH '&&' set INCLUDE '&&' set LIB 2>/dev/null |
      sed -nE "s/\\r\$//; s,\\\\,/,g; /^(PATH|INCLUDE|LIB|LIBPATH)=/s/^([^=]*)=(.*)\$/vc\1=$'\2'/p"
    )
	traceoff $?
    vcPATH=${vcPATH%${novcPATH}};          vcPATH=${vcPATH%%;}
    vcINCLUDE=${vcINCLUDE%${novcINCLUDE}}; vcINCLUDE=${vcINCLUDE%%;}
    vcLIB=${vcLIB%${novcLIB}};             vcLIB=${vcLIB%%;}
    vcLIBPATH=${vcLIBPATH%${novcLIBPATH}}; vcLIBPATH=${vcLIBPATH%%;}

    if [[ "::${vcPATH}::${vcINCLUDE}::${vcLIB}::${vcLIBPATH}::" == *::::* ]]
	then
		verbose "Querying environment for ${chost} failed."
		return 1
	fi
	verbose "Querying environment for ${chost} done."
	return 0
}

prune-parityconf() {
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local conffile="${sysconfdir}/parity.${vsarch}-${vsver}.conf"
	local defconffile="${sysconfdir}/parity.${vsarch}.conf"

	if [[ -s ${defconffile} ]]
	then
		local confline defchost
		while read confline
		do
			if [[ ${confline} == *"PARITY CONFIGURATION for "* ]]
			then
				defchost=${confline#*PARITY CONFIGURATION for }
				defchost=$(get-chost "${defchost}")
				break
			fi
		done < "${defconffile}"
		if [[ ${defchost} == "${chost}" ]]
		then
			noquiet "Removing ${defconffile} ..."
			traceon
			rm -f "${defconffile}"
			if traceoff $?
			then
				verbose "Removing ${defconffile} done."
			else
				noquiet "Removing ${defconffile} failed."
			fi
		fi
	fi

	if [[ -r ${conffile} ]]
	then
		noquiet "Removing ${conffile} ..."
	else
		verbose "Removing ${conffile} ..."
	fi
	traceon
	rm -f "${conffile}" "${SELFDIR}"/libparity-runtime.${vsarch}-${vsver}.a "${SELFDIR}"/libparity-loader.${vsarch}-${vsver}.a
	if ! traceoff $?
	then
		verbose "Removing ${conffile} failed."
		return 1
	fi
	verbose "Removing ${conffile} done."
	return 0
}

update-parityconf() {
	local isdefault=false
	if [[ $1 == --set-default ]]
	then
		isdefault=true
		shift
	fi
	local chost=$(get-chost "$1")
	is-supported-chost "${chost}" || return 1

	if ! query-vcvars "${chost}"
	then
		prune-parityconf "${chost}"
		return 1
	fi
	vcPATH=$(cygpath -up "${vcPATH}")
	vcINCLUDE=$(cygpath -up "${vcINCLUDE}")
	vcLIB=$(cygpath -up "${vcLIB}")
	vcLIBPATH=$(cygpath -up "${vcLIBPATH}")

	local vsexes
	IFS=${NL} eval 'vsexes=( $(get-supported-executables '${chost}') )'

	local vsexe
	local name executable
	for vsexe in "${vsexes[@]}"
	do
		name= executable=
		eval ${vsexe}
		eval ${name}Exe=
		IFS=: eval ${name}Exe='$(find ${vcPATH} -maxdepth 1 -iname "${executable}" -print -quit)'
	done

	local AdditionalExecPaths=
	local SysIncludePaths=
	local SysLibraryPaths=
	local ObjectsLibraries=

	local p
	IFS=: eval '
		for p in ${vcPATH}
		do
			AdditionalExecPaths+="AdditionalExecPaths = ${p}${NL}"
		done
		for p in ${vcINCLUDE}
		do
			SysIncludePaths+="SysIncludePaths = ${p}${NL}"
		done
		for p in ${vcLIB}
		do
			SysLibraryPaths+="SysLibraryPaths = ${p}${NL}"
		done
	'
	local sdklib
	for sdklib in $(get-supported-sdklibs "${chost}")
	do
		IFS=: eval local ${sdklib}Lib='$(find ${vcLIB} -maxdepth 1 -iname "${sdklib}.lib" -print -quit)'
		eval '[[ -n ${'${sdklib}'Lib} ]]' || continue
		eval 'ObjectsLibraries+="ObjectsLibraries = ${'${sdklib}'Lib}${NL}"'
	done

	local vsver=$(get-vsver "${chost}")
	local vsarch=$(get-vsarch "${chost}")
	local cflags=$(get-cflags "${chost}")

	(
		noquiet "Creating ${sysconfdir}/parity.${vsarch}-${vsver}.conf ..."
		tmpdir=${TMPDIR:-/tmp}/parity-config.${vsarch}-${vsver}.$$
		rm -rf "${tmpdir}"

		set -e
		trap "rm -rf '${tmpdir}'" 0
		mkdir -p "${tmpdir}"
		cd "${tmpdir}"

		case ${vsver} in # (
		7.*) RuntimeType="Runtime = static"  ;; # (
		*)   RuntimeType="Runtime = dynamic" ;; # (
		esac # )

		{
			echo "
#
# PARITY CONFIGURATION for ${vsarch}-${vsver}
#
#  Automatically generated by parity-config,
#  use the parity-config to regenerate.
#

Colored = true
"
			for vsexe in "${vsexes[@]}"
			do
				name= executable=
				eval ${vsexe}
				eval "[[ -n \${${name}Exe} ]]" || continue
				eval "echo \"${name}Exe = \${${name}Exe}\""
			done

			echo "
${AdditionalExecPaths}
${SysIncludePaths}
${SysLibraryPaths}

PCRTInclude = ${SELFDIR}/parity.runtime
PCRTLibrary = ${SELFDIR}/libparity.runtime.${vsarch}-${vsver}.a
ParityLoader = ${SELFDIR}/libparity.loader.${vsarch}-${vsver}.a

${RuntimeType}

Defines = WIN32_LEAN_AND_MEAN
Defines = _WIN32_WINNT=0x0501

${ObjectsLibraries}

section windows {
	Subsystem = Windows
}
"
		} > parity.${vsarch}-${vsver}.conf

		verbose "Compiling ${SELFDIR}/libparity-runtime.${vsarch}-${vsver}.a ..."
		if ! "${CC}" ${cflags} -c "${SELFDIR}"/parity.runtime/*.c "${SELFDIR}"/parity.runtime/*.cpp \
		|| !  "${AR}" cr libparity-runtime.${vsarch}-${vsver}.a *.o \
		; then
			verbose "Compiling ${SELFDIR}/libparity-runtime.${vsarch}-${vsver}.a failed."
			exit 1
		fi
		verbose "Compiling ${SELFDIR}/libparity-runtime.${vsarch}-${vsver}.a done."

		verbose "Compiling ${SELFDIR}/libparity-loader.${vsarch}-${vsver}.a ..."
		if ! "${CC}" ${cflags} -c "${SELFDIR}"/parity.loader/Loader*.c \
		|| !  "${AR}" cr libparity-loader.${vsarch}-${vsver}.a Loader*.o \
		; then
			verbose "Compiling ${SELFDIR}/libparity-loader.${vsarch}-${vsver}.a failed."
			exit 1
		fi
		verbose "Compiling ${SELFDIR}/libparity-loader.${vsarch}-${vsver}.a done."

		mv -f libparity-runtime.${vsarch}-${vsver}.a libparity-loader.${vsarch}-${vsver}.a "${SELFDIR}"/
		mv -f parity.${vsarch}-${vsver}.conf "${sysconfdir}"/parity.${vsarch}-${vsver}.conf

		if ${isdefault}
		then
			cp -f "${sysconfdir}/parity.${vsarch}-${vsver}.conf" "${sysconfdir}/parity.${vsarch}.conf"
		fi
	)
	if [[ $? -ne 0 ]]
	then
		noquiet "Creating ${sysconfdir}/parity.${vsarch}-${vsver}.conf failed."
		return 1
	fi
	verbose "Creating ${sysconfdir}/parity.${vsarch}-${vsver}.conf done."
	return 0
}

parityconf-list-supported() {
	local chost
	for chost in $(get-supported-chosts)
	do
		echo "${chost}"
	done
	return 0
}

parityconf-list-available() {
	query-novcvars-once || die "Cannot get initial environment."

	local chost
	for chost in $(get-supported-chosts)
	do
		if query-vcvars "${chost}"
		then
			echo "${chost}"
		fi
	done
	return 0
}

parityconf-enable() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-available)."

	query-novcvars-once || die "Cannot get initial environment."

	local chost
	for chost in "${chosts[@]}"
	do
		update-parityconf "${chost}" &
	done
	wait
	noquiet "Enabling configurations done."
	return 0
}

parityconf-enable-all() {
	query-novcvars-once || die "Cannot get initial environment."

	local chost
	for chost in $(get-supported-chosts)
	do
		update-parityconf "${chost}" &
	done
	wait
	noquiet "Enabling all available configurations done."
	return 0
}

parityconf-disable() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-supported)."

	local chost
	for chost in "${chosts[@]}"
	do
		prune-parityconf "${chost}" &
	done
	wait
	noquiet "Disabling configurations done."
	return 0
}

parityconf-disable-all() {
	local chost
	for chost in $(get-supported-chosts)
	do
		prune-parityconf "${chost}" &
	done
	wait
	noquiet "Disabling all configurations done."
	return 0
}

parityconf-is-available() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-available)."

	query-novcvars-once || die "Cannot get even initial environment."

	local chost
	for chost in "${chosts[@]}"
	do
		query-vcvars "${chost}" || return 1
	done
	return 0
}

parityconf-set-default() {
	local chosts
	chosts=( $(args-to-chosts "$@") ) || die
	[[ ${#chosts[@]} -lt 1 ]] && die "Need a configuration value (try --list-available)."

	for chost in "${chosts[@]}"
	do
		update-parityconf --set-default "${chost}" || die
	done
	noquiet "Setting default configuration done."
}

traceon() { :; }
traceoff() { set +x; return $1; }
_verbose() { :; }
_noquiet() { :
    ${1+echo "$@"}
}


# parse options
arg= argvalue=
while ${1+:} false
do
	arg=$1
	shift
	case ${arg} in
	--debug)
		traceoff() { :; return $1; }
		set -x
		;;
	--trace)
		traceon() { set -x; }
		;;
	--verbose)
		_verbose() { :
            ${1+echo "$@"}
        }
		_noquiet() { :
            ${1+echo "$@"}
        }
		;;
	--quiet)
		_verbose() { :; }
		_noquiet() { :; }
		;;
	--sysconfdir|--libdir|--includedir)
		${1:+:} die "Missing argument to ${arg} (try --help)."
		eval "${arg#--}=\$1"
		shift
		;;
	--sysconfdir=*|--libdir=*|--includedir=*)
		argvalue=${arg#--*=}
		arg=${arg%%=*}
		${argvalue:+:} die "Missing argument to ${arg} (try --help)."
		eval "${arg#--}=\${argvalue}"
		;;
    *)
        break
        ;;
	esac
done

verbose() { _verbose "$@"; }
noquiet() { _noquiet "$@"; }

case ${arg} in
--list-supported|--list-available|--is-available)
    verbose() { _verbose "$@" >&2; }
    noquiet() { _noquiet "$@" >&2; }
    action=${arg#--}
    ;;
--help|--enable|--enable-all|--disable|--disable-all|--set-default)
    action=${arg#--}
    ;;
*)
	usage >&2
	die "Missing or invalid action argument (try --help)."
    ;;
esac

parityconf-${action} ${1+"$@"}

exit $?
